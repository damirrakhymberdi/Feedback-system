// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API feedback system
const http = require('http');

const API_BASE = 'http://localhost:3001';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                try {
                    const jsonBody = JSON.parse(body);
                    resolve({ status: res.statusCode, data: jsonBody });
                } catch (e) {
                    resolve({ status: res.statusCode, data: body });
                }
            });
        });

        req.on('error', reject);

        if (data) {
            req.write(JSON.stringify(data));
        }
        req.end();
    });
}

// –¢–µ—Å—Ç 1: Health Check
async function testHealthCheck() {
    console.log('\nüîç –¢–µ—Å—Ç 1: Health Check');
    console.log('='.repeat(50));

    try {
        const result = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/health',
            method: 'GET'
        });

        console.log(`–°—Ç–∞—Ç—É—Å: ${result.status}`);
        console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(result.data, null, 2));

        if (result.status === 200 && result.data.success) {
            console.log('‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
            return true;
        } else {
            console.log('‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª!');
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ health check:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
async function testCreateFeedbackValid() {
    console.log('\nüîç –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    console.log('='.repeat(50));

    const feedbackData = {
        rating: 5,
        main_content: '–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞! –û—á–µ–Ω—å –ø–æ–º–æ–≥ —Å –∑–∞–¥–∞—á–µ–π.',
        comment: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!'
    };

    try {
        const result = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/feedback',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Session-ID': 'test-session-123',
                'X-Request-ID': 'test-request-456'
            }
        }, feedbackData);

        console.log(`–°—Ç–∞—Ç—É—Å: ${result.status}`);
        console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(result.data, null, 2));

        if (result.status === 201 && result.data.success) {
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
            return true;
        } else {
            console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ –ø—Ä–æ—à–ª–æ!');
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
async function testCreateFeedbackInvalid() {
    console.log('\nüîç –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    console.log('='.repeat(50));

    const invalidData = {
        rating: 6, // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-5)
        main_content: 'A'.repeat(6000), // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        comment: 'B'.repeat(1500) // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    };

    try {
        const result = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/feedback',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, invalidData);

        console.log(`–°—Ç–∞—Ç—É—Å: ${result.status}`);
        console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(result.data, null, 2));

        if (result.status === 400 && result.data.success === false) {
            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            return true;
        } else {
            console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –¢–µ—Å—Ç CORS
async function testCORS() {
    console.log('\nüîç –¢–µ—Å—Ç 4: CORS Headers');
    console.log('='.repeat(50));

    try {
        const result = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/health',
            method: 'OPTIONS',
            headers: {
                'Origin': 'http://localhost:5173',
                'Access-Control-Request-Method': 'POST',
                'Access-Control-Request-Headers': 'Content-Type'
            }
        });

        console.log(`–°—Ç–∞—Ç—É—Å: ${result.status}`);
        console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(result.data, null, 2));

        if (result.status === 200) {
            console.log('‚úÖ CORS —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            return true;
        } else {
            console.log('‚ùå CORS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ CORS:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 5: 404 Handler
async function test404Handler() {
    console.log('\nüîç –¢–µ—Å—Ç 5: 404 Handler');
    console.log('='.repeat(50));

    try {
        const result = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/nonexistent-endpoint',
            method: 'GET'
        });

        console.log(`–°—Ç–∞—Ç—É—Å: ${result.status}`);
        console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(result.data, null, 2));

        if (result.status === 404 && result.data.success === false) {
            console.log('‚úÖ 404 Handler —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            return true;
        } else {
            console.log('‚ùå 404 Handler –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ 404:', error.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Feedback System API');
    console.log('='.repeat(60));

    const results = [];

    results.push(await testHealthCheck());
    results.push(await testCreateFeedbackValid());
    results.push(await testCreateFeedbackInvalid());
    results.push(await testCORS());
    results.push(await test404Handler());

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('='.repeat(60));
    const passed = results.filter(r => r).length;
    const total = results.length;

    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}/${total}`);

    if (passed === total) {
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().catch(console.error);


